import sqlite3
import os
import hashlib

# üîß ƒê·∫£m b·∫£o file users.db n·∫±m c√πng c·∫•p v·ªõi th∆∞ m·ª•c core
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(_file_), ".."))
USER_DB = os.path.join(BASE_DIR, "users.db")


def init_user_db():
    """Kh·ªüi t·∫°o CSDL ng∆∞·ªùi d√πng v√† t·∫°o admin m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥"""
    os.makedirs(BASE_DIR, exist_ok=True)
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            role TEXT DEFAULT 'user',
            status TEXT DEFAULT 'active',
            is_active INTEGER DEFAULT 0
        )
    """)
    conn.commit()

    # ‚úÖ T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
    c.execute("SELECT * FROM users WHERE username = 'admin'")
    if not c.fetchone():
        admin_pass = hashlib.sha256("admin123".encode()).hexdigest()
        c.execute(
            "INSERT INTO users (username, password, role, status, is_active) VALUES (?, ?, ?, ?, ?)",
            ("admin", admin_pass, "admin", "active", 0)
        )
        print("‚úÖ Admin m·∫∑c ƒë·ªãnh ƒë∆∞·ª£c t·∫°o: admin / admin123")

    conn.commit()
    conn.close()


def hash_password(password: str):
    """M√£ h√≥a m·∫≠t kh·∫©u"""
    return hashlib.sha256(password.encode()).hexdigest()


def register(username: str, password: str):
    """ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi"""
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    try:
        c.execute(
            "INSERT INTO users (username, password, role, status, is_active) VALUES (?, ?, ?, ?, ?)",
            (username, hash_password(password), 'user', 'active', 0)
        )
        conn.commit()
        print(f"üÜï User m·ªõi ƒë∆∞·ª£c t·∫°o: {username}")
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()


def login(username: str, password: str):
    """ƒêƒÉng nh·∫≠p: tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng n·∫øu h·ª£p l·ªá, c·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông"""
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, hash_password(password)))
    user = c.fetchone()
    if not user:
        conn.close()
        return None

    # Ki·ªÉm tra n·∫øu t√†i kho·∫£n b·ªã kh√≥a
    if len(user) >= 5 and user[4] == 'locked':
        conn.close()
        return 'locked'

    # ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông
    c.execute("UPDATE users SET is_active=1 WHERE username=?", (username,))
    conn.commit()
    conn.close()
    return user


def logout_user(username: str):
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i is_active = 0 khi ng∆∞·ªùi d√πng ƒëƒÉng xu·∫•t"""
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    c.execute("UPDATE users SET is_active=0 WHERE username=?", (username,))
    conn.commit()
    conn.close()


def toggle_user_status(user_id: int):
    """Kh√≥a ho·∫∑c m·ªü kh√≥a ng∆∞·ªùi d√πng (tr·ª´ admin)"""
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    c.execute("SELECT status FROM users WHERE id=? AND username!='admin'", (user_id,))
    row = c.fetchone()
    if not row:
        conn.close()
        return False
    new_status = 'locked' if row[0] == 'active' else 'active'
    c.execute("UPDATE users SET status=? WHERE id=? AND username!='admin'", (new_status, user_id))
    conn.commit()
    conn.close()
    return True


def delete_user(user_id: int):
    """X√≥a ng∆∞·ªùi d√πng (tr·ª´ admin)"""
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE id=? AND username!='admin'", (user_id,))
    conn.commit()
    conn.close()
    return True


def get_all_users():
    """Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng"""
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    c.execute("SELECT id, username, role, status, is_active FROM users")
    users = c.fetchall()
    conn.close()
    return users


def set_user_active(username: str, active: bool):
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông (is_active = 1 ho·∫∑c 0)"""
    conn = sqlite3.connect(USER_DB)
    c = conn.cursor()
    c.execute("UPDATE users SET is_active=? WHERE username=?", (1 if active else 0, username))
    conn.commit()
    conn.close()